name: Publish to npm

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build-and-test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Install dependencies
              run: bun install

            - name: Build
              run: bun run build

            - name: Type check
              run: bun run typecheck

            - name: Lint check
              run: bun run lint

            - name: Format check
              run: bun run format:check

            - name: Check version consistency
              run: |
                  PACKAGE_VERSION=$(node -p "require('./package.json').version")
                  MANIFEST_VERSION=$(node -p "require('./manifest.json').version")
                  echo "package.json version: $PACKAGE_VERSION"
                  echo "manifest.json version: $MANIFEST_VERSION"
                  if [ "$PACKAGE_VERSION" != "$MANIFEST_VERSION" ]; then
                    echo "❌ Error: Version mismatch between package.json ($PACKAGE_VERSION) and manifest.json ($MANIFEST_VERSION)"
                    echo "Please ensure both files have the same version number."
                    exit 1
                  else
                    echo "✅ Version consistency check passed: $PACKAGE_VERSION"
                  fi

            - name: Run tests
              run: bun test
              env:
                  DISCORD_BOT_TOKEN: "test_token_for_ci"
                  DISCORD_GUILD_ID: "123456789012345678"
                  DISCORD_TEXT_CHANNEL_ID: "123456789012345678"
                  NODE_ENV: "test"

    publish:
        needs: build-and-test
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  registry-url: "https://registry.npmjs.org"

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Install dependencies
              run: bun install

            - name: Build
              run: bun run build

            - name: Check if version changed
              id: version-check
              run: |
                  CURRENT_VERSION=$(node -p "require('./package.json').version")
                  PUBLISHED_VERSION=$(npm view discord-interface-mcp version 2>/dev/null || echo "0.0.0")
                  echo "Current version: $CURRENT_VERSION"
                  echo "Published version: $PUBLISHED_VERSION"
                  echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                  echo "previous_version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
                  if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
                    echo "should_publish=true" >> $GITHUB_OUTPUT
                    echo "Version changed, will publish"
                  else
                    echo "should_publish=false" >> $GITHUB_OUTPUT
                    echo "Version unchanged, skipping publish"
                  fi

            - name: Publish to npm
              if: steps.version-check.outputs.should_publish == 'true'
              run: npm publish --access public
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Create release tag
              if: steps.version-check.outputs.should_publish == 'true'
              run: |
                  VERSION=$(node -p "require('./package.json').version")
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git tag "v$VERSION"
                  git push origin "v$VERSION"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Install DXT CLI
              if: steps.version-check.outputs.should_publish == 'true'
              run: npm install -g @anthropic-ai/dxt

            - name: Build DXT package
              if: steps.version-check.outputs.should_publish == 'true'
              run: |
                  dxt pack
                  VERSION=$(node -p "require('./package.json').version")
                  mv "discord-interface-mcp@${VERSION}.dxt" "discord-interface-mcp-${VERSION}.dxt"

            - name: Create GitHub Release
              if: steps.version-check.outputs.should_publish == 'true'
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ steps.version-check.outputs.version }}
                  name: v${{ steps.version-check.outputs.version }}
                  draft: false
                  prerelease: false
                  files: |
                      discord-interface-mcp-*.dxt
                  body: |
                      ## 🚀 Discord Interface MCP v${{ steps.version-check.outputs.version }}

                      ### 📦 インストール方法

                      #### One-click インストール (DXT)
                      1. [discord-interface-mcp-${{ steps.version-check.outputs.version }}.dxt](https://github.com/${{ github.repository }}/releases/download/v${{ steps.version-check.outputs.version }}/discord-interface-mcp-${{ steps.version-check.outputs.version }}.dxt) をダウンロード
                      2. Claude Desktop > Settings > MCP Servers > Add Extension (.dxt)
                      3. ダウンロードしたファイルを選択
                      4. 必要な設定を入力

                      ### 📝 変更内容
                      [完全な変更履歴を見る](https://github.com/${{ github.repository }}/compare/v${{ steps.version-check.outputs.previous_version }}...v${{ steps.version-check.outputs.version }})

                      ---
                      🤖 Generated with [Claude Code](https://claude.ai/code)
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
